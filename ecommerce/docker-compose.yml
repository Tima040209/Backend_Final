version: "3.8"
services:
  app1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app1
    ports:
      - "8001:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=ecommmerce.settings
    depends_on:
      - redis
    networks:
      - app_network

  app2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app2
    ports:
      - "8002:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=ecommerce.settings
    depends_on:
      - redis
    networks:
      - app_network

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
    depends_on:
      - app1
      - app2
    networks:
      - app_network

  redis:
    image: redis:latest
    container_name: redis_cache
    ports:
      - "6379:6379"
    networks:
      - app_network

  mysql:
    image: mysql:8
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: "tima12345"
      MYSQL_DATABASE: final_commerce
      MYSQL_USER: root
      MYSQL_PASSWORD: "tima12345"
    ports:
      - "3306:3306"
    networks:
      - app_network


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin"
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.0
    container_name: logstash
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch

networks:
  app_network:
    driver: bridge
